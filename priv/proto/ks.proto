syntax = "proto2";

package ks;

///////////////////////////////////////////////////////////
///// CONSTANTS ///////////////////////////////////////////
///////////////////////////////////////////////////////////

// Actions representing player input                   
enum input_type {
    IMPULSE_FWD = 0;
    IMPULSE_REV = 1;
    IMPULSE_LEFT = 2;
    IMPULSE_RIGHT = 3;
    ROTATE_LEFT = 4;
    ROTATE_RIGHT = 5;
    ACTION_0 = 10;
}

enum projectile_type {
    BALLISTIC = 0;
}

////////////////////////////////////////////////////////////
///// SUB MESSAGES /////////////////////////////////////////
////////////////////////////////////////////////////////////
message vector2 { 
    required float x = 1;
    required float y = 2;
}

// kinematics - describe the physics of the object     
message kinematics { 
    required float rot = 1;
    required vector2 pos = 2;
    required vector2 vel = 3;
}

// actor_stats - describe ship component stats 
message actor_stats {
    // TODO: Move me inside of the actor_grid
    required uint32 max_hp = 1;
    required uint32 cur_hp = 2;
    required uint32 rotation_fac = 3;
    required uint32 speed_fac = 4;
    required uint32 max_vel = 5;
}

// instruct the client that the following entities collided
message collision {
    repeated sint64 id = 1; 
}

////////////////////////////////////////////////////////////
///// TOP-LEVEL MESSAGES ///////////////////////////////////
////////////////////////////////////////////////////////////

// instruct server to create a new player
message join {
    required string handle = 1;
}

// instruct clients to remove an actor from the zone
message part {
    required sint64 id = 1;
}

// instruct the client to make a new actor
message actor {
    required sint64 id = 1; // all entities are uniqued
                            // identified by the server
    required string handle = 2;
    required kinematics phys = 3;
    repeated vector2 hitbox = 4;
    required actor_stats stats = 5;
}

// instruct the client to make a new projectile
message projectile {
    required sint64 owner = 1;
    required sint64 id = 2;
    required kinematics phys = 3;
    required uint32 ttl = 4;
    repeated vector2 hitbox = 5;
}

// player intent for this tick
message input {
    // would it be faster/more compact to have a bitfield? probably once the
    // game is better understood
    repeated input_type keys = 1;
    optional vector2 cursor = 2;
}

// per-tick updates on the physics for every actor
message actor_phys {
  required sint64 id = 1;
  required kinematics phys = 2;
}

// Send a full state transfer to a client when joining
message zone_transfer {
  repeated actor entities = 1;
  repeated projectile projectiles = 2;
}

// (frequently) transfer the current gamestate to clients
message zone_snapshot {
    repeated actor_phys phys_updates = 1;
    repeated projectile projectiles = 2;
    repeated collision collisions = 3;
}
