syntax = "proto2";

package ks;

///////////////////////////////////////////////////////////
///// CONSTANTS ///////////////////////////////////////////
///////////////////////////////////////////////////////////

// Actions representing player input                   
enum input_type {
    IMPULSE_FWD   = 0;
    IMPULSE_REV   = 1;
    IMPULSE_LEFT  = 2;
    IMPULSE_RIGHT = 3;
    ROTATE_LEFT   = 4;
    ROTATE_RIGHT  = 5;
    ACTION_0      = 10;
}

// Create fixed arcs for weapons. Can't be an optional float thanks to some
// gdscript brokenness. Revisit.
// https://github.com/godotengine/godot-proposals/issues/162
// TODO-BUG: ^
enum arc {
    ARC_360 = 0;
    ARC_180 = 1;
    ARC_90  = 2;
    ARC_45  = 3;
    ARC_22  = 4;
    ARC_0   = 5;
}

////////////////////////////////////////////////////////////
///// SUB MESSAGES /////////////////////////////////////////
////////////////////////////////////////////////////////////
message vector2 { 
    required double x = 1;
    required double y = 2;
}

message kinematics { 
    // TODO: Change to optional as needed. e.g., positions may not be needed
    // all the time.
    required double  pos_r = 1;  // rotational position
    required double  vel_r = 2;  // rotational velocity
    required vector2 pos_t = 3;  // translational position
    required vector2 vel_t = 4;  // translational velocity
    // higher order vectors unnecessary here
    //required double  acc_r = 5;  // rotational acceleration
    //required vector2 acc_t = 6;  // translational acceleration
}

message thrust {
    required uint32 top    = 1;
    required uint32 bottom = 2;
    required uint32 left   = 3;
    required uint32 right  = 4;
}

// instruct the client of the zone conditions
message environment {
    required double max_vel_t      = 1; // vector2.length()
    required double max_vel_r      = 2; 
    required double racc_factor    = 3;
    required double acc_factor     = 4;
    optional sint64 max_visibility = 5;
}

// instruct the client that the following entities collided
message collision {
    repeated sint64 id = 1; 
}

////////////////////////////////////////////////////////////
///// SHIPS & COMPONENTS ///////////////////////////////////
////////////////////////////////////////////////////////////

// Send relevant data only - derived data (e.g., overall thrust, 
// etc) will be sent directly from the server
message cell {
    // Cell position
    required vector2     grid_coords  = 1;
    required sint32      id           = 2;
    required uint32      orientation  = 3;
    optional string      sprite       = 4; // Sprite used by the cell
    optional arc         firing_arc   = 5; // Firing arc of any weapons, if app
    repeated vector2     hitbox       = 7; // Hitbox, if applicable
}

// Serialize a ship grid
message ship {
    required kinematics kinematics     = 1;
    required float      mass           = 2; // translational mass
    required vector2    center_of_mass = 3; // center of mass
    required float      angular_mass   = 4; // moment of inertia
    required float      torque         = 5;
    required thrust     thrust         = 6;
    repeated cell       cells          = 7; // modules
    repeated vector2    hull           = 8; // convex hull
}

////////////////////////////////////////////////////////////
///// TOP-LEVEL MESSAGES ///////////////////////////////////
////////////////////////////////////////////////////////////

message ks {
    oneof msg {
        join           join           = 1;
        part           part           = 2;
        actor_request  actor_request  = 3;
        actor          actor          = 4;
        target         target         = 5;
        target_info    target_info    = 6;
        projectile     projectile     = 7;
        input          input          = 8;
        actor_updates  actor_updates  = 9;
        zone_transfer  zone_transfer  = 10;
        zone_snapshot  zone_snapshot  = 11;
        admin_reconfig admin_reconfig = 12;
    }
}

// instruct server to create a new player
message join {
    required string handle = 1;
    optional string ship   = 2;
}

// instruct clients to remove an actor from the zone
message part {
    required sint64 id = 1;
}

// Clients may request information about an actor
message actor_request {
    required sint64 id = 1;
}

// Version 2: instruct the client to make a new actor
message actor {
    required sint64 id     = 1; 
    required string handle = 2;
    required ship   ship   = 3;
}

// Client updates the server with its current target
message target {
    required sint64 id = 1;
}

// Server updates client with visible modules
message target_info {
    repeated sint64  cell_id    = 1;
    repeated vector2 rays       = 2;
    optional vector2 ray_origin = 3;
}

// instruct the client to make a new projectile
message projectile {
    required sint64     owner  = 1;
    required sint64     id     = 2;
    required kinematics phys   = 3;
    required uint32     ttl    = 4;
    repeated vector2    hitbox = 5;
}

// player intent for this tick
message input {
    required uint64     frame  = 1;
    repeated input_type keys   = 2;
    optional vector2    cursor = 3;
}

// per-tick updates on the physics for every actor
message actor_updates {
    required sint64     id         = 1;
    required kinematics kinematics = 2;
}

// Send a full state transfer to a client when joining including the server's
// frame number for synchronization
message zone_transfer {
    required uint64      frame       = 1; 
    required uint32      tick_ms     = 2;
    required environment env         = 3;
    repeated sint64      entities    = 4;
    repeated projectile  projectiles = 5;
}

// (frequently) transfer the current gamestate to clients
message zone_snapshot {
    repeated actor_updates actors      = 1;
    repeated projectile    projectiles = 2;
    repeated collision     collisions  = 3;
}

message admin_reconfig {
    optional environment env = 1;
}
