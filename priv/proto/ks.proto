syntax = "proto2";

package ks;

///////////////////////////////////////////////////////////
///// CONSTANTS ///////////////////////////////////////////
///////////////////////////////////////////////////////////

// Actions representing player input                   
enum intent_type {
    MOVE   = 0;
    ATTACK = 1;
}

enum input_type {
    IMPULSE_FWD = 0;
    IMPULSE_REV = 1;
    // may want these
    // IMPULSE_LEFT = 2;
    // IMPULSE_RIGHT = 3;
    ROTATE_LEFT = 4;
    ROTATE_RIGHT = 5;
}

////////////////////////////////////////////////////////////
///// SUB MESSAGES /////////////////////////////////////////
////////////////////////////////////////////////////////////
message vector2 { 
    required float x = 1;
    required float y = 2;
}

// kinematics - describe the physics of the object     
message kinematics { 
    required float rot = 1;
    required vector2 pos = 2;
    required vector2 vel = 3;
}

// entity_stats - describe ship component stats 
message entity_stats {
    // TODO: Move me inside of the entity_grid
    required uint32 max_hp = 1;
    required uint32 cur_hp = 2;
    required uint32 rotation_fac = 3;
    required uint32 speed_fac = 4;
}

// instruct the client to make a new transient object
message projectile {
    required sint64 owner = 1;
    required sint64 id = 2;
    required kinematics phys = 3;
    required uint32 ttl = 4;
    repeated vector2 hitbox = 5;
}

// instruct the client that the following entities collided
message collision {
    repeated sint64 id = 1; 
}

////////////////////////////////////////////////////////////
///// TOP-LEVEL MESSAGES ///////////////////////////////////
////////////////////////////////////////////////////////////

// instruct server to create a new player
message join {
    required string handle = 1;
}

// instruct clients to remove an entity from the zone
message part {
    required sint64 id = 1;
}

// instruct the client to make a new entity
message new_entity {
    required sint64 id = 1; // all entities are uniqued
                            // identified by the server
    required string name = 2;
    required kinematics phys = 3;
    repeated vector2 hitbox = 4;
    required entity_stats stats = 5;
}

// player intent for this tick
message input {
    // would it be faster/more compact to have a bitfield? probably once the
    // game is better understood
    repeated input_type keys = 1;
}

// (frequently) transfer the current gamestate to clients
message state_transfer {
    //required uint64 sequence = 1;
    //repeated intent actions = 1;
    repeated projectile projectiles = 1;
    repeated collision collisions = 2;
    //repeated entity entities = 4;
}
